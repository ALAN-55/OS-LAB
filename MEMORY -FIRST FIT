#inlude<stdio.h>
struct process
{
int ps, flag;
}p[50];
struct sizes
{
 int size, alloc;
}s[5];
int main()
{
 int i= 0, np= 0, n= 0, j= 0;
 printf("First-fit\n");
 printf("Enter the number of blocks: ");
 scanf("%d", &n);
 printf("Enter the size for %d blocks\n", n);
 for(i= 0; i< n; i++)
 {
 printf("Enter the size for block %d: ", i);
 scanf("%d", &s[i].size);
 }
 printf("\nEnter the number of processes: ", i);
 scanf("%d", &np);
 printf("Enter the size of %d processes\n", np);
MEMORY ALLOCATION SCHEMES
A.FIRST FIT
#inlude<stdio.h>
struct process
{
for(i= 0; i< np; i++)
 {
 printf("Enter the size of process %d: ", i);
 scanf("\n%d", &p[i].ps);
 }
 printf("\n\t\t Allocation of blocks using first-fit is as follows:\n");
 printf("\n\t\t Process \t Process-size\t Blocks\n");
 for(i= 0; i< np; i++)
 {
 for(j= 0; j< n; j++)
 {
 if(p[i].flag!= 1)
 {
 if(p[i].flag!= 1)
 {
 if(p[i].ps<= s[j].size)
 {
 if(!s[j].alloc)
 {
 p[i].flag= 1;
 s[j].alloc= 1;
 printf("\n\t\t %d\t\t %d\t\t %d\t", i, p[i].ps, s[j].size);
 }
 }
 }
 }
 }
 }
 for(i= 0; i< np; i++)
 {
if(p[i].flag!= 1)
 printf("\nSorry! Process %d must wait as there is no sufficient memory", i);
 }
}
